#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de surveillance et renommage automatique d'images PNG (Version ultra-optimis√©e)
Surveille un dossier en continu et renomme automatiquement les nouveaux fichiers PNG.
Version optimis√©e avec r√©duction de code tout en gardant toutes les fonctionnalit√©s.
"""

import os
import re
import sys
import time
import json
import threading
from pathlib import Path
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class PNGRenameHandler(FileSystemEventHandler):
    """Gestionnaire d'√©v√©nements optimis√© pour surveiller les fichiers PNG."""
    
    def __init__(self, prefix="Horizon"):
        self.prefix = prefix
        self.processing = False
        self.last_event_time = {}
        self.debounce_delay = 1.5
        self.temp_files = set()
        self.processing_lock = threading.Lock()
        
    def _should_process_file(self, file_path):
        """V√©rifie si un fichier doit √™tre trait√©."""
        if not file_path.lower().endswith('.png'):
            return False
        file_name = Path(file_path).name
        return not (file_name.startswith('TEMP_') or file_name in self.temp_files)
    
    def _handle_file_event(self, file_path, event_type):
        """Gestion unifi√©e des √©v√©nements de fichiers."""
        if self._should_process_file(file_path):
            print(f"üîç √âv√©nement d√©tect√© - {event_type}: {file_path}")
            self._debounced_process(file_path)
    
    def on_created(self, event):
        if not event.is_directory:
            self._handle_file_event(event.src_path, "Fichier cr√©√©")
    
    def on_modified(self, event):
        if not event.is_directory and not self.is_already_renamed(Path(event.src_path).name):
            self._handle_file_event(event.src_path, "Fichier modifi√©")
    
    def on_moved(self, event):
        if not event.is_directory:
            self._handle_file_event(event.dest_path, "Fichier d√©plac√©")
    
    def _debounced_process(self, file_path):
        """Traitement avec anti-rebond."""
        current_time = time.time()
        
        if file_path in self.last_event_time:
            time_diff = current_time - self.last_event_time[file_path]
            if time_diff < self.debounce_delay:
                print(f"üîÑ √âv√©nement ignor√© (debounce {time_diff:.1f}s): {Path(file_path).name}")
                return
        
        self.last_event_time[file_path] = current_time
        print(f"‚úÖ √âv√©nement accept√©: {Path(file_path).name}")
        
        threading.Thread(target=self.process_new_file, args=(file_path,), daemon=True).start()
    
    def process_new_file(self, file_path):
        """Traite un nouveau fichier PNG d√©tect√©."""
        try:
            file_path = Path(file_path)
            
            # Retry si fichier pas encore disponible
            if not file_path.exists():
                print(f"‚ö†Ô∏è Retry pour: {file_path.name}")
                time.sleep(1.0)
                if not file_path.exists():
                    print(f"‚ö†Ô∏è Fichier introuvable: {file_path.name}")
                    return
                print(f"‚úÖ Fichier trouv√© apr√®s retry: {file_path.name}")
                
            if self.is_already_renamed(file_path.name):
                print(f"‚ö†Ô∏è Fichier d√©j√† renomm√©: {file_path.name}")
                return
            
            with self.processing_lock:
                if self.processing:
                    print(f"‚ö†Ô∏è Traitement en cours, ignor√©: {file_path.name}")
                    return
                self.processing = True
            
            try:
                print(f"üîÑ Attente stabilisation: {file_path.name}")
                if not self._wait_file_stable(file_path):
                    print(f"‚ö†Ô∏è Fichier non stable: {file_path.name}")
                    return
                
                print(f"\nüÜï Nouveau fichier: {file_path.name}")
                self.reorganize_all_files(file_path.parent)
                self._cleanup_cache()
                
            finally:
                with self.processing_lock:
                    self.processing = False
                
        except Exception as e:
            print(f"‚ùå Erreur traitement {file_path}: {e}")
            with self.processing_lock:
                self.processing = False
    
    def _cleanup_cache(self):
        """Nettoie le cache des √©v√©nements."""
        cutoff = time.time() - (self.debounce_delay * 5)
        self.last_event_time = {k: v for k, v in self.last_event_time.items() if v > cutoff}
    
    def _wait_file_stable(self, file_path, timeout=5):
        """Attend la stabilit√© du fichier."""
        start_time = time.time()
        last_size = -1
        stable_count = 0
        
        while time.time() - start_time < timeout:
            try:
                if not file_path.exists():
                    return False
                    
                current_size = file_path.stat().st_size
                if current_size > 0:
                    if current_size == last_size:
                        stable_count += 1
                        if stable_count >= 2:
                            print(f"‚úÖ Fichier stable ({current_size} bytes): {file_path.name}")
                            return True
                    else:
                        stable_count = 0
                
                last_size = current_size
                time.sleep(0.2)
                
            except (OSError, FileNotFoundError):
                return False
        
        # Accepter si taille > 0 m√™me apr√®s timeout
        try:
            final_size = file_path.stat().st_size
            if final_size > 0:
                print(f"‚ö†Ô∏è Timeout, fichier accept√© ({final_size} bytes): {file_path.name}")
                return True
        except:
            pass
            
        print(f"‚ùå Fichier non stable apr√®s {timeout}s: {file_path.name}")
        return False
    
    def is_already_renamed(self, filename):
        """V√©rifie si d√©j√† renomm√©."""
        return bool(re.match(rf"^{self.prefix}_\d{{2,}}\.png$", filename))
    
    def check_existing_files(self, directory):
        """V√©rifie les fichiers existants au d√©marrage."""
        try:
            png_files = list(directory.glob("*.png"))
            if not png_files:
                return 0
            
            new_files = [f for f in png_files if not self.is_already_renamed(f.name)]
            if not new_files:
                return 0
            
            print(f"üìã {len(new_files)} fichiers non renomm√©s trouv√©s")
            self.reorganize_all_files(directory)
            return len(new_files)
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification initiale: {e}")
            return 0
    
    def reorganize_all_files(self, directory):
        """R√©organise tous les fichiers PNG."""
        try:
            png_files = list(directory.glob("*.png"))
            if not png_files:
                return
            
            # Trier par date de cr√©ation
            png_files.sort(key=lambda x: os.path.getctime(x))
            
            # Pr√©parer les renommages
            renames = []
            for i, file_path in enumerate(png_files):
                expected = f"{self.prefix}_{i+1:02d}.png"
                if file_path.name != expected:
                    temp = f"TEMP_{i+1:02d}_{self.prefix}.png"
                    renames.append((file_path, temp, expected))
            
            if not renames:
                print("‚úÖ Fichiers d√©j√† dans le bon ordre")
                return
            
            print(f"üîÑ R√©organisation de {len(renames)} fichiers...")
            
            # Phase 1: Noms temporaires
            for file_path, temp, final in renames:
                temp_path = file_path.parent / temp
                self.temp_files.add(temp)
                file_path.rename(temp_path)
            
            # Phase 2: Noms finaux
            for file_path, temp, final in renames:
                temp_path = file_path.parent / temp
                final_path = file_path.parent / final
                
                old_name = file_path.name
                temp_path.rename(final_path)
                self.temp_files.discard(temp)
                
                creation_time = datetime.fromtimestamp(os.path.getctime(final_path))
                print(f"‚úÖ {old_name} ‚Üí {final} (cr√©√© le {creation_time.strftime('%Y-%m-%d %H:%M:%S')})")
            
            print(f"‚ú® {len(renames)} fichiers r√©organis√©s!")
            
        except Exception as e:
            print(f"‚ùå Erreur r√©organisation: {e}")


# === CONFIGURATION ===
class ConfigManager:
    """Gestionnaire de configuration centralis√©."""
    
    def __init__(self):
        # D√©terminer le bon chemin selon l'environnement
        if getattr(sys, 'frozen', False):
            # Mode ex√©cutable PyInstaller
            exe_dir = Path(sys.executable).parent
        else:
            # Mode script Python normal
            exe_dir = Path(__file__).parent
        
        self.config_file = exe_dir / "watcher_config.txt"
        print(f"üìÅ Fichier de config: {self.config_file}")  # Debug
    
    def load_configs(self):
        """Charge la configuration compl√®te."""
        if not self.config_file.exists():
            self.save_configs({})
            return {}
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                return json.loads(content) if content else {}
        except (json.JSONDecodeError, FileNotFoundError):
            return {}
    
    def save_configs(self, configs):
        """Sauvegarde la configuration."""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(configs, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde: {e}")
    
    def get_paths(self):
        """R√©cup√®re les chemins sauvegard√©s."""
        configs = self.load_configs()
        return {config.get("name"): config.get("path") 
                for config in configs.values() 
                if config.get("name") and config.get("path")}
    
    def get_prefix(self, path, name):
        """R√©cup√®re le pr√©fixe pour un chemin."""
        configs = self.load_configs()
        key = f"{name}_{path}" if name else path
        
        if key in configs:
            return configs[key].get("prefix", name or "Horizon")
        return name or "Horizon"
    
    def save_prefix(self, path, name, prefix):
        """Sauvegarde le pr√©fixe."""
        configs = self.load_configs()
        key = f"{name}_{path}" if name else path
        
        configs[key] = {
            "path": path,
            "name": name,
            "prefix": prefix,
            "last_used": datetime.now().isoformat()
        }
        self.save_configs(configs)


# === INTERFACE UTILISATEUR ===
class UserInterface:
    """Interface utilisateur simplifi√©e."""
    
    def __init__(self):
        self.config = ConfigManager()
        self.exit_commands = ['annuler', 'cancel', 'q', 'quit', 'exit']
    
    def check_exit(self, user_input):
        """V√©rifie si l'utilisateur veut quitter."""
        return user_input.lower() in self.exit_commands
    
    def get_input_with_cancel(self, prompt, allow_empty=False):
        """Saisie avec possibilit√© d'annulation."""
        try:
            value = input(prompt).strip()
            if self.check_exit(value):
                return None
            if not allow_empty and not value:
                return ""  # Valeur vide mais pas annulation
            return value
        except KeyboardInterrupt:
            print("\n‚ùå Annul√© par l'utilisateur.")
            return None
    
    def display_menu(self, paths_dict):
        """Affiche le menu principal."""
        print("\nüìÇ Dossiers √† surveiller:")
        print("-" * 40)
        
        configs = self.config.load_configs()
        for i, (name, path) in enumerate(paths_dict.items(), 1):
            key = f"{name}_{path}"
            prefix = configs.get(key, {}).get("prefix", name)
            print(f"{i}. {name}")
            print(f"   üìÅ {path}")
            print(f"   üè∑Ô∏è  Pr√©fixe: {prefix}")
            print()
        
        print(f"{len(paths_dict) + 1}. ‚ûï Ajouter un nouveau dossier")
        print(f"{len(paths_dict) + 2}. ‚úèÔ∏è  Saisir un chemin manuellement")
        print("-" * 40)
    
    def add_new_path(self, paths_dict):
        """Ajoute un nouveau dossier."""
        print("\n‚ûï Ajout d'un nouveau dossier")
        print("-" * 40)
        print("üí° Tapez 'q' pour annuler")
        print()
        
        # Nom du raccourci
        while True:
            name = self.get_input_with_cancel("Nom du raccourci: ")
            if name is None:
                print("‚ùå Ajout annul√©.")
                return None
            if name == "":
                print("‚ùå Le nom ne peut pas √™tre vide.")
                continue
            if name in paths_dict:
                print(f"‚ùå Le nom '{name}' existe d√©j√†.")
                continue
            break
        
        # Chemin du dossier
        while True:
            path = self.get_input_with_cancel("Chemin du dossier: ")
            if path is None:
                print("‚ùå Ajout annul√©.")
                return None
            if path == "":
                print("‚ùå Le chemin ne peut pas √™tre vide.")
                continue
            
            if Path(path).exists() and Path(path).is_dir():
                break
            
            confirm = self.get_input_with_cancel(f"‚ö†Ô∏è '{path}' n'existe pas. Ajouter quand m√™me ? (o/N): ")
            if confirm is None:
                print("‚ùå Ajout annul√©.")
                return None
            if confirm.lower() in ['o', 'oui', 'y', 'yes']:
                break
        
        # Sauvegarder
        paths_dict[name] = path
        self.config.save_prefix(path, name, name)
        print(f"\n‚úÖ Dossier ajout√©: {name}: {path}")
        
        # Utiliser maintenant ?
        use_now = self.get_input_with_cancel("\nUtiliser maintenant ? (O/n): ", allow_empty=True)
        if use_now is None:
            return None
        if use_now.lower() not in ['n', 'non', 'no']:
            return path, name
        
        return None
    
    def get_user_choice(self):
        """S√©lection du dossier √† surveiller."""
        while True:
            paths_dict = self.config.get_paths()
            
            if not paths_dict:
                print("\nüìÇ Aucun dossier sauvegard√©.")
                print("-" * 40)
                print("1. ‚ûï Ajouter un nouveau dossier")
                print("2. ‚úèÔ∏è  Saisir un chemin manuellement")
                print("0. ‚ùå Quitter")
                print("-" * 40)
                
                choice = self.get_input_with_cancel("\nVotre choix: ")
                if choice is None or choice == "0":
                    return None, None
                
                if choice == "1":
                    result = self.add_new_path(paths_dict)
                    if result:
                        return result
                elif choice == "2":
                    path = self.get_input_with_cancel("\nChemin du dossier: ")
                    if path and path != "":
                        return path, None
                else:
                    print("‚ùå Choix invalide.")
            else:
                self.display_menu(paths_dict)
                choice = self.get_input_with_cancel("\nVotre choix (ou 'q' pour quitter): ")
                
                if choice is None:
                    return None, None
                
                if choice.isdigit():
                    choice_num = int(choice)
                    path_items = list(paths_dict.items())
                    
                    if 1 <= choice_num <= len(path_items):
                        name, path = path_items[choice_num - 1]
                        print(f"\n‚úÖ S√©lectionn√©: {name}")
                        return path, name
                    elif choice_num == len(path_items) + 1:
                        result = self.add_new_path(paths_dict)
                        if result:
                            return result
                    elif choice_num == len(path_items) + 2:
                        path = self.get_input_with_cancel("\nChemin du dossier: ")
                        if path and path != "":
                            return path, None
                    else:
                        print("‚ùå Choix invalide.")
                else:
                    print("‚ùå Choix invalide.")


def run_interactive_menu(directory_path, prefix, shortcut_name, event_handler):
    """Menu interactif pendant la surveillance."""
    config = ConfigManager()
    
    def print_menu():
        print("\n" + "=" * 50)
        print("üìã MENU DU SERVICE")
        print("=" * 50)
        print("1. üìä Statut")
        print("2. üìÅ Changer dossier (red√©marre)")
        print("3. üè∑Ô∏è  Changer pr√©fixe")
        print("4. üìã R√©organiser fichiers")
        print("5. ‚ùå Arr√™ter")
        print("6. üîÑ Retour surveillance")
        print("=" * 50)
    
    while True:
        print_menu()
        try:
            choice = input("\nChoix (1-6): ").strip()
            
            if choice == "1":
                print(f"\nüìä STATUT:")
                print(f"   üìÅ Dossier: {directory_path}")
                print(f"   üè∑Ô∏è  Pr√©fixe: {prefix}")
                print(f"   üü¢ Service: Actif")
                input("\nEntr√©e pour continuer...")
                
            elif choice == "2":
                print("\n‚ùå Red√©marrage n√©cessaire pour changer de dossier.")
                confirm = input("Arr√™ter maintenant ? (o/N): ").lower()
                if confirm in ['o', 'oui', 'y']:
                    return "stop"
                
            elif choice == "3":
                new_prefix = input(f"\nNouveau pr√©fixe (actuel: '{prefix}'): ").strip()
                if new_prefix:
                    event_handler.prefix = new_prefix
                    config.save_prefix(directory_path, shortcut_name, new_prefix)
                    print(f"‚úÖ Pr√©fixe chang√©: '{new_prefix}'")
                input("\nEntr√©e pour continuer...")
                
            elif choice == "4":
                print("\nüîÑ R√©organisation...")
                try:
                    event_handler.reorganize_all_files(Path(directory_path))
                    print("‚úÖ Termin√©!")
                except Exception as e:
                    print(f"‚ùå Erreur: {e}")
                input("\nEntr√©e pour continuer...")
                
            elif choice == "5":
                confirm = input("\n‚ùì Arr√™ter le service ? (o/N): ").lower()
                if confirm in ['o', 'oui', 'y']:
                    return "stop"
                    
            elif choice == "6":
                print("\nüîÑ Retour surveillance...")
                return "continue"
                
            else:
                print("‚ùå Choix invalide (1-6).")
                
        except KeyboardInterrupt:
            print("\nüîÑ Retour surveillance...")
            return "continue"


def main():
    """Fonction principale optimis√©e."""
    print("üñºÔ∏è  Service de surveillance et renommage PNG")
    print("=" * 55)
    print("üì° Surveillance automatique des nouveaux fichiers PNG")
    print()
    
    ui = UserInterface()
    config = ConfigManager()
    
    # S√©lection du dossier
    result = ui.get_user_choice()
    if not result or result == (None, None):
        print("‚ùå Aucun dossier s√©lectionn√©.")
        return
    
    directory_path, shortcut_name = result
    
    # V√©rification du dossier
    watch_dir = Path(directory_path)
    if not watch_dir.exists():
        print(f"‚ùå Dossier inexistant: {directory_path}")
        return
    if not watch_dir.is_dir():
        print(f"‚ùå Pas un dossier: {directory_path}")
        return
    
    # Configuration du pr√©fixe
    saved_prefix = config.get_prefix(directory_path, shortcut_name)
    print(f"\nPr√©fixe sauvegard√©: '{saved_prefix}'")
    
    prefix_input = ui.get_input_with_cancel(
        f"Pr√©fixe (Entr√©e='{saved_prefix}', 'q'=quitter): ", 
        allow_empty=True
    )
    if prefix_input is None:
        print("‚ùå Configuration annul√©e.")
        return
    
    prefix = prefix_input if prefix_input else saved_prefix
    if prefix_input:
        config.save_prefix(directory_path, shortcut_name, prefix)
        print(f"‚úÖ Pr√©fixe sauvegard√©: '{prefix}'")
    
    print(f"\nüéØ Configuration:")
    print(f"   üìÅ Dossier: {directory_path}")
    print(f"   üè∑Ô∏è  Pr√©fixe: {prefix}")
    
    # D√©marrage du service
    event_handler = PNGRenameHandler(prefix)
    observer = Observer()
    observer.schedule(event_handler, directory_path, recursive=False)
    
    print("\nüîç V√©rification fichiers existants...")
    initial_count = event_handler.check_existing_files(Path(directory_path))
    print(f"‚úÖ {initial_count} fichiers trait√©s" if initial_count else "‚úÖ Aucun fichier √† traiter")
    
    observer.start()
    print("\nüü¢ Service d√©marr√©!")
    print("üí¨ Tapez 'menu' ou 'quit', ou Ctrl+C pour arr√™ter")
    
    # Boucle interactive
    try:
        while True:
            try:
                user_input = input("\n> ").strip().lower()
                
                if user_input in ['menu', 'm']:
                    result = run_interactive_menu(directory_path, prefix, shortcut_name, event_handler)
                    if result == "stop":
                        break
                elif user_input in ['quit', 'q', 'exit', 'stop']:
                    confirm = input("‚ùì Arr√™ter ? (o/N): ").lower()
                    if confirm in ['o', 'oui', 'y']:
                        break
                    print("üì° Surveillance continue...")
                else:
                    print("üí° Commandes: 'menu', 'quit'")
                    
            except EOFError:
                time.sleep(0.5)
                
    except KeyboardInterrupt:
        print("\n\nüî¥ Arr√™t demand√©...")
    
    observer.stop()
    print("‚úÖ Service arr√™t√©.")
    observer.join()


if __name__ == "__main__":
    main()
