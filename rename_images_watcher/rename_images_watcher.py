#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de surveillance et renommage automatique d'images PNG, JPG et JPEG en temps r√©el (Version optimis√©e)
Surveille un dossier en continu et renomme automatiquement les nouveaux fichiers PNG, JPG et JPEG.
Optimis√© pour un usage minimal des ressources syst√®me.
"""

import os
import re
import time
import json
import threading
from pathlib import Path
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class ImageRenameHandler(FileSystemEventHandler):
    """Gestionnaire d'√©v√©nements optimis√© pour surveiller les fichiers PNG, JPG et JPEG."""
    
    def __init__(self, prefix="Horizon"):
        self.prefix = prefix
        self.processing = False
        self.last_event_time = {}  # Cache pour √©viter les √©v√©nements multiples
        self.debounce_delay = 1.5  # D√©lai anti-rebond augment√© pour les captures d'√©cran
        self.temp_files = set()  # Fichiers temporaires cr√©√©s par le script
        self.processing_lock = threading.Lock()  # Verrou pour √©viter les conflits
        
    def on_created(self, event):
        """Appel√© quand un nouveau fichier est cr√©√©."""
        if not event.is_directory:
            file_path_lower = event.src_path.lower()
            if file_path_lower.endswith('.png') or file_path_lower.endswith('.jpg') or file_path_lower.endswith('.jpeg'):
                file_name = Path(event.src_path).name
                # Ignorer les fichiers temporaires cr√©√©s par le script
                if file_name.startswith('TEMP_') or file_name in self.temp_files:
                    return
                print(f"üîç √âv√©nement d√©tect√© - Fichier cr√©√©: {event.src_path}")
                self._debounced_process(event.src_path)
    
    def on_modified(self, event):
        """Appel√© quand un fichier est modifi√©."""
        if not event.is_directory:
            file_path_lower = event.src_path.lower()
            if file_path_lower.endswith('.png') or file_path_lower.endswith('.jpg') or file_path_lower.endswith('.jpeg'):
                file_name = Path(event.src_path).name
                # Ignorer les fichiers temporaires et les fichiers d√©j√† trait√©s r√©cemment
                if file_name.startswith('TEMP_') or file_name in self.temp_files:
                    return
                # R√©duire les √©v√©nements de modification redondants
                if self.is_already_renamed(file_name):
                    return
                print(f"üîç √âv√©nement d√©tect√© - Fichier modifi√©: {event.src_path}")
                self._debounced_process(event.src_path)
    
    def on_moved(self, event):
        """Appel√© quand un fichier est d√©plac√©/renomm√©."""
        if not event.is_directory:
            file_path_lower = event.dest_path.lower()
            if file_path_lower.endswith('.png') or file_path_lower.endswith('.jpg') or file_path_lower.endswith('.jpeg'):
                file_name = Path(event.dest_path).name
                # Ignorer les fichiers temporaires
                if file_name.startswith('TEMP_'):
                    return
                print(f"üîç √âv√©nement d√©tect√© - Fichier d√©plac√©: {event.dest_path}")
                self._debounced_process(event.dest_path)
    
    def _debounced_process(self, file_path):
        """Traitement avec anti-rebond pour √©viter les √©v√©nements multiples."""
        current_time = time.time()
        
        # V√©rifier si cet √©v√©nement est trop r√©cent par rapport au pr√©c√©dent
        if file_path in self.last_event_time:
            time_diff = current_time - self.last_event_time[file_path]
            if time_diff < self.debounce_delay:
                print(f"üîÑ √âv√©nement ignor√© (debounce {time_diff:.1f}s < {self.debounce_delay}s): {Path(file_path).name}")
                return  # Ignorer cet √©v√©nement (trop r√©cent)
        
        self.last_event_time[file_path] = current_time
        
        print(f"‚úÖ √âv√©nement accept√© pour traitement: {Path(file_path).name}")
        
        # Traiter le fichier dans un thread s√©par√© pour ne pas bloquer
        threading.Thread(target=self.process_new_file, args=(file_path,), daemon=True).start()
    
    def process_new_file(self, file_path):
        """Traite un nouveau fichier PNG d√©tect√©."""
        try:
            file_path = Path(file_path)
            
            # V√©rifier si le fichier existe avec syst√®me de retry
            if not file_path.exists():
                print(f"‚ö†Ô∏è Fichier pas encore disponible, tentative de retry: {file_path.name}")
                # Attendre un peu plus et re-essayer
                time.sleep(1.0)
                if not file_path.exists():
                    print(f"‚ö†Ô∏è Fichier introuvable apr√®s retry: {file_path.name}")
                    return
                print(f"‚úÖ Fichier trouv√© apr√®s retry: {file_path.name}")
                
            if self.is_already_renamed(file_path.name):
                print(f"‚ö†Ô∏è Fichier d√©j√† renomm√©: {file_path.name}")
                return
            
            # V√©rifier si un autre thread traite d√©j√† ce fichier sp√©cifique
            with self.processing_lock:
                if self.processing:
                    print(f"‚ö†Ô∏è Traitement en cours, fichier ignor√©: {file_path.name}")
                    return
                self.processing = True
            
            try:
                # Attendre que le fichier soit stable avec timeout plus long
                print(f"üîÑ Attente de stabilisation: {file_path.name}")
                if not self.wait_for_file_stable(file_path, timeout=5):
                    print(f"‚ö†Ô∏è Fichier non stable, ignor√©: {file_path.name}")
                    return
                
                print(f"\nüÜï Nouveau fichier d√©tect√©: {file_path.name}")
                # R√©organiser tous les fichiers
                self.reorganize_all_files(file_path.parent)
                
                # Nettoyer le cache des √©v√©nements anciens
                self._cleanup_event_cache()
                
            finally:
                with self.processing_lock:
                    self.processing = False
                
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement de {file_path}: {e}")
            with self.processing_lock:
                self.processing = False
    
    def _cleanup_event_cache(self):
        """Nettoie le cache des √©v√©nements anciens pour √©conomiser la m√©moire."""
        current_time = time.time()
        cutoff_time = current_time - (self.debounce_delay * 5)  # Garder 5x le d√©lai
        
        self.last_event_time = {
            path: timestamp for path, timestamp in self.last_event_time.items()
            if timestamp > cutoff_time
        }
    
    def wait_for_file_stable(self, file_path, timeout=5):
        """Attend que le fichier soit stable (optimis√© pour √™tre plus rapide)."""
        start_time = time.time()
        last_size = -1
        stable_count = 0
        
        while time.time() - start_time < timeout:
            try:
                if not file_path.exists():
                    print(f"‚ö†Ô∏è Fichier disparu pendant l'attente: {file_path.name}")
                    return False
                    
                current_size = file_path.stat().st_size
                
                # Si le fichier a une taille valide
                if current_size > 0:
                    if current_size == last_size:
                        stable_count += 1
                        # Consid√©rer stable apr√®s 2 v√©rifications identiques pour √™tre plus s√ªr
                        if stable_count >= 2:
                            print(f"‚úÖ Fichier stable ({current_size} bytes): {file_path.name}")
                            return True
                    else:
                        stable_count = 0
                
                last_size = current_size
                time.sleep(0.2)  # Interval adapt√©
                
            except (OSError, FileNotFoundError) as e:
                print(f"‚ö†Ô∏è Erreur d'acc√®s au fichier {file_path.name}: {e}")
                return False
        
        # Si on sort de la boucle par timeout, accepter le fichier s'il a une taille > 0
        try:
            final_size = file_path.stat().st_size
            if final_size > 0:
                print(f"‚ö†Ô∏è Timeout atteint, fichier accept√© ({final_size} bytes): {file_path.name}")
                return True
        except:
            pass
            
        print(f"‚ùå Fichier non stable apr√®s {timeout}s: {file_path.name}")
        return False
    
    def is_already_renamed(self, filename):
        """V√©rifie si un fichier a d√©j√† √©t√© renomm√©."""
        pattern = rf"^{self.prefix}_\d{{2,}}\.(png|jpg|jpeg)$"
        return bool(re.match(pattern, filename, re.IGNORECASE))
    
    def get_creation_time(self, file_path):
        """Obtient la date de cr√©ation d'un fichier."""
        return os.path.getctime(file_path)
    
    def check_existing_files(self, directory):
        """V√©rifie et traite les fichiers PNG, JPG et JPEG existants au d√©marrage."""
        try:
            # Trouver tous les fichiers d'image existants
            image_files = []
            for ext in ["*.png", "*.jpg", "*.jpeg"]:
                image_files.extend(list(directory.glob(ext)))
                image_files.extend(list(directory.glob(ext.upper())))
            
            if not image_files:
                return 0
            
            # S√©parer les fichiers d√©j√† renomm√©s des nouveaux
            new_files = []
            for file_path in image_files:
                if not self.is_already_renamed(file_path.name):
                    new_files.append(file_path)
            
            if not new_files:
                return 0
            
            print(f"üìã {len(new_files)} fichiers non renomm√©s trouv√©s")
            
            # Traiter les fichiers existants (r√©organisation compl√®te)
            self.reorganize_all_files(directory)
            
            return len(new_files)
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification initiale: {e}")
            return 0
    
    def reorganize_all_files(self, directory):
        """R√©organise tous les fichiers PNG, JPG et JPEG du dossier."""
        try:
            # Trouver tous les fichiers d'image
            image_files = []
            for ext in ["*.png", "*.jpg", "*.jpeg"]:
                image_files.extend(list(directory.glob(ext)))
                image_files.extend(list(directory.glob(ext.upper())))
            
            if not image_files:
                return
            
            # Trier par date de cr√©ation
            all_files = image_files.copy()
            all_files.sort(key=lambda x: self.get_creation_time(x))
            
            # Cr√©er la liste des renommages n√©cessaires
            temp_names = []
            files_to_rename = []
            
            for i, file_path in enumerate(all_files):
                # Pr√©server l'extension originale
                ext = file_path.suffix.lower()
                expected_name = f"{self.prefix}_{i+1:02d}{ext}"
                current_name = file_path.name
                
                if current_name != expected_name:
                    temp_name = f"TEMP_{i+1:02d}_{self.prefix}{ext}"
                    temp_names.append((file_path, temp_name, expected_name))
                    files_to_rename.append(file_path)
            
            if not files_to_rename:
                print("‚úÖ Fichiers d√©j√† dans le bon ordre chronologique")
                return
            
            print(f"üîÑ R√©organisation de {len(files_to_rename)} fichiers...")
            
            # Phase 1: Noms temporaires
            for file_path, temp_name, final_name in temp_names:
                temp_path = file_path.parent / temp_name
                # Marquer comme fichier temporaire
                self.temp_files.add(temp_name)
                file_path.rename(temp_path)
            
            # Phase 2: Noms finaux
            renamed_count = 0
            for file_path, temp_name, final_name in temp_names:
                temp_path = file_path.parent / temp_name
                final_path = file_path.parent / final_name
                
                old_name = file_path.name
                temp_path.rename(final_path)
                
                # Nettoyer les fichiers temporaires du cache
                self.temp_files.discard(temp_name)
                
                creation_time = datetime.fromtimestamp(self.get_creation_time(final_path))
                creation_str = creation_time.strftime("%Y-%m-%d %H:%M:%S")
                
                print(f"‚úÖ {old_name} ‚Üí {final_name} (cr√©√© le {creation_str})")
                renamed_count += 1
            
            print(f"‚ú® {renamed_count} fichiers r√©organis√©s avec succ√®s!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©organisation: {e}")


def load_saved_paths():
    """Charge les chemins sauvegard√©s depuis le fichier de configuration unifi√©."""
    configs = load_saved_configs()
    paths_dict = {}
    
    for key, config in configs.items():
        name = config.get("name")
        path = config.get("path")
        if name and path:
            paths_dict[name] = path
    
    return paths_dict


def save_paths(paths_dict):
    """Cette fonction n'est plus n√©cessaire car save_prefix g√®re tout."""
    # Fonction conserv√©e pour compatibilit√© mais ne fait plus rien
    # Toutes les donn√©es sont maintenant g√©r√©es par watcher_config.txt
    pass


def load_saved_configs():
    """Charge la configuration compl√®te (chemins + pr√©fixes)."""
    config_file = Path(__file__).parent / "watcher_config.txt"
    
    if not config_file.exists():
        save_configs({})
        return {}
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if content:
                return json.loads(content)
            else:
                return {}
    except (json.JSONDecodeError, FileNotFoundError):
        return {}


def save_configs(configs_dict):
    """Sauvegarde la configuration compl√®te."""
    config_file = Path(__file__).parent / "watcher_config.txt"
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(configs_dict, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la sauvegarde de la configuration: {e}")


def get_saved_prefix(path, name):
    """R√©cup√®re le pr√©fixe sauvegard√© pour un chemin donn√©."""
    configs = load_saved_configs()
    key = f"{name}_{path}" if name else path
    
    if key in configs:
        return configs[key].get("prefix", name if name else "Horizon")
    
    return name if name else "Horizon"


def save_prefix(path, name, prefix):
    """Sauvegarde le pr√©fixe pour un chemin donn√©."""
    configs = load_saved_configs()
    key = f"{name}_{path}" if name else path
    
    configs[key] = {
        "path": path,
        "name": name,
        "prefix": prefix,
        "last_used": datetime.now().isoformat()
    }
    
    save_configs(configs)


def display_paths_menu(paths_dict):
    """Affiche le menu des chemins disponibles."""
    print("\nüìÇ Dossiers √† surveiller:")
    print("-" * 40)
    
    configs = load_saved_configs()
    path_items = list(paths_dict.items())
    
    for i, (name, path) in enumerate(path_items, 1):
        # R√©cup√©rer le pr√©fixe sauvegard√©
        key = f"{name}_{path}"
        saved_prefix = "Horizon"
        
        if key in configs:
            saved_prefix = configs[key].get("prefix", name)
        elif name:
            saved_prefix = name
            
        print(f"{i}. {name}")
        print(f"   üìÅ {path}")
        print(f"   üè∑Ô∏è  Pr√©fixe: {saved_prefix}")
        print()
    
    print(f"{len(path_items) + 1}. ‚ûï Ajouter un nouveau dossier")
    print(f"{len(path_items) + 2}. ‚úèÔ∏è  Saisir un chemin manuellement")
    print("-" * 40)


def get_user_choice():
    """G√®re la s√©lection du dossier √† surveiller."""
    paths_dict = load_saved_paths()
    
    while True:
        if not paths_dict:
            print("\nüìÇ Aucun dossier sauvegard√© trouv√©.")
            print("-" * 40)
            print("1. ‚ûï Ajouter un nouveau dossier")
            print("2. ‚úèÔ∏è  Saisir un chemin manuellement")
            print("0. ‚ùå Quitter")
            print("-" * 40)
            print("üí° Vous pouvez aussi taper 'q' ou 'quit' pour quitter")
            
            try:
                choice = input("\nVotre choix (num√©ro): ").strip()
                
                # Gestion de la sortie
                if choice.lower() in ['q', 'quit', 'exit'] or choice == "0":
                    print("‚ùå Arr√™t du service.")
                    return None, None
                
                if choice == "1":
                    result = add_new_path(paths_dict)
                    if result:
                        return result
                    continue
                    
                elif choice == "2":
                    try:
                        manual_path = input("\nEntrez le chemin du dossier √† surveiller (ou 'annuler' pour revenir): ").strip()
                        if manual_path.lower() in ['annuler', 'cancel', 'q', 'quit', 'exit']:
                            print("‚ùå Saisie annul√©e.")
                            continue
                        if manual_path:
                            return manual_path, None
                        continue
                    except KeyboardInterrupt:
                        print("\n‚ùå Saisie annul√©e par l'utilisateur.")
                        continue
                    
                else:
                    print("‚ùå Choix invalide. Veuillez choisir 1, 2 ou 0.")
                    
            except KeyboardInterrupt:
                print("\n\n‚ùå Arr√™t du service.")
                return None, None
                
        else:
            display_paths_menu(paths_dict)
            
            try:
                choice = input("\nVotre choix (num√©ro ou 'q' pour quitter): ").strip()
                
                # Gestion de la sortie
                if choice.lower() in ['q', 'quit', 'exit']:
                    print("‚ùå Arr√™t du service.")
                    return None, None
                
                if not choice.isdigit():
                    print("‚ùå Veuillez entrer un num√©ro valide ou 'q' pour quitter.")
                    continue
                
                choice_num = int(choice)
                path_items = list(paths_dict.items())
                
                if 1 <= choice_num <= len(path_items):
                    selected_name, selected_path = path_items[choice_num - 1]
                    print(f"\n‚úÖ Dossier s√©lectionn√©: {selected_name}")
                    print(f"üìÅ {selected_path}")
                    return selected_path, selected_name
                    
                elif choice_num == len(path_items) + 1:
                    result = add_new_path(paths_dict)
                    if result:
                        return result
                    continue
                    
                elif choice_num == len(path_items) + 2:
                    try:
                        manual_path = input("\nEntrez le chemin du dossier √† surveiller (ou 'annuler' pour revenir): ").strip()
                        if manual_path.lower() in ['annuler', 'cancel', 'q', 'quit', 'exit']:
                            print("‚ùå Saisie annul√©e.")
                            continue
                        if manual_path:
                            return manual_path, None
                        continue
                    except KeyboardInterrupt:
                        print("\n‚ùå Saisie annul√©e par l'utilisateur.")
                        continue
                    
                else:
                    print(f"‚ùå Choix invalide. Veuillez choisir entre 1 et {len(path_items) + 2} ou 'q' pour quitter.")
                    
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide ou 'q' pour quitter.")
            except KeyboardInterrupt:
                print("\n\n‚ùå Arr√™t du service.")
                return None, None
                    
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide ou 'q' pour quitter.")
            except KeyboardInterrupt:
                print("\n\n‚ùå Arr√™t du service.")
                return None, None


def add_new_path(paths_dict):
    """Ajoute un nouveau dossier √† surveiller."""
    print("\n‚ûï Ajout d'un nouveau dossier √† surveiller")
    print("-" * 40)
    print("üí° Tapez 'annuler' ou 'q' pour annuler √† tout moment")
    print()
    
    while True:
        try:
            name = input("Nom du raccourci (ex: 'Screenshots', 'T√©l√©chargements'): ").strip()
            
            # V√©rifier l'annulation
            if name.lower() in ['annuler', 'cancel', 'q', 'quit', 'exit']:
                print("‚ùå Ajout de dossier annul√©.")
                return None
                
            if name:
                if name in paths_dict:
                    print(f"‚ùå Le nom '{name}' existe d√©j√†. Choisissez un autre nom.")
                    continue
                break
            print("‚ùå Le nom ne peut pas √™tre vide.")
            
        except KeyboardInterrupt:
            print("\n‚ùå Ajout de dossier annul√© par l'utilisateur.")
            return None
    
    while True:
        try:
            path = input("Chemin du dossier: ").strip()
            
            # V√©rifier l'annulation
            if path.lower() in ['annuler', 'cancel', 'q', 'quit', 'exit']:
                print("‚ùå Ajout de dossier annul√©.")
                return None
                
            if path:
                if Path(path).exists() and Path(path).is_dir():
                    break
                else:
                    print(f"‚ö†Ô∏è Le dossier '{path}' n'existe pas.")
                    confirm = input("Voulez-vous l'ajouter quand m√™me ? (o/N/annuler): ").strip().lower()
                    if confirm in ['annuler', 'cancel', 'q']:
                        print("‚ùå Ajout de dossier annul√©.")
                        return None
                    if confirm in ['o', 'oui', 'y', 'yes']:
                        break
                    continue
            print("‚ùå Le chemin ne peut pas √™tre vide.")
            
        except KeyboardInterrupt:
            print("\n‚ùå Ajout de dossier annul√© par l'utilisateur.")
            return None
    
    paths_dict[name] = path
    # Sauvegarder dans le fichier unifi√© avec le nom comme pr√©fixe par d√©faut
    save_prefix(path, name, name)
    
    print(f"\n‚úÖ Nouveau dossier ajout√©:")
    print(f"üìå {name}: {path}")    
    try:
        use_now = input("\nUtiliser ce dossier maintenant ? (O/n/annuler): ").strip().lower()
        if use_now in ['annuler', 'cancel', 'q']:
            print("‚ùå Annul√©.")
            return None
        if use_now in ['', 'o', 'oui', 'y', 'yes']:
            return path, name
    except KeyboardInterrupt:
        print("\n‚ùå Annul√© par l'utilisateur.")
        return None
    
    return None


def main():
    """Fonction principale du service de surveillance."""
    print("üñºÔ∏è  Service de surveillance et renommage PNG, JPG et JPEG")
    print("=" * 55)
    print("üì° Ce service surveille un dossier et renomme automatiquement")
    print("   les nouveaux fichiers PNG, JPG et JPEG d√®s qu'ils apparaissent.")
    print()
      # S√©lection du dossier √† surveiller
    result = get_user_choice()
    
    if not result or result == (None, None):
        print("‚ùå Aucun dossier s√©lectionn√©. Arr√™t du service.")
        return
    
    directory_path, shortcut_name = result
    
    # V√©rifier que le dossier existe
    watch_dir = Path(directory_path)
    if not watch_dir.exists():
        print(f"‚ùå Le dossier {directory_path} n'existe pas.")
        return
    
    if not watch_dir.is_dir():
        print(f"‚ùå {directory_path} n'est pas un dossier.")
        return
      # Demander le pr√©fixe
    saved_prefix = get_saved_prefix(directory_path, shortcut_name)
    
    print(f"\nPr√©fixe sauvegard√© pour ce dossier: '{saved_prefix}'")
    
    try:
        prefix_input = input(f"Pr√©fixe pour les fichiers (par d√©faut '{saved_prefix}', Entr√©e = conserver, 'annuler' = quitter): ").strip()
        
        if prefix_input.lower() in ['annuler', 'cancel', 'q', 'quit', 'exit']:
            print("‚ùå Configuration annul√©e.")
            return
            
        if prefix_input:
            # L'utilisateur a saisi un nouveau pr√©fixe
            prefix = prefix_input
            # Sauvegarder le nouveau pr√©fixe
            save_prefix(directory_path, shortcut_name, prefix)
            print(f"‚úÖ Nouveau pr√©fixe '{prefix}' sauvegard√© pour ce dossier")
        else:
            # Utiliser le pr√©fixe sauvegard√©
            prefix = saved_prefix
            
    except KeyboardInterrupt:
        print("\n‚ùå Configuration annul√©e par l'utilisateur.")
        return
    
    print(f"\nüéØ Configuration du service:")
    print(f"   üìÅ Dossier surveill√©: {directory_path}")
    print(f"   üè∑Ô∏è  Pr√©fixe: {prefix}")
    print()
    
    # Cr√©er le gestionnaire d'√©v√©nements et l'observateur
    event_handler = ImageRenameHandler(prefix)
    observer = Observer()
    observer.schedule(event_handler, directory_path, recursive=False)
    
    # V√©rifier et traiter les fichiers existants AVANT de d√©marrer la surveillance
    print("üîç V√©rification des fichiers existants...")
    initial_check_result = event_handler.check_existing_files(Path(directory_path))
    
    if initial_check_result:
        print(f"‚úÖ {initial_check_result} fichiers trait√©s au d√©marrage")
    else:
        print("‚úÖ Aucun fichier √† traiter au d√©marrage")
      # D√©marrer la surveillance
    observer.start()
    
    print("üü¢ Service d√©marr√© !")
    print("üì° Surveillance en cours...")
    print()
    print("üí° Instructions:")
    print("   ‚Ä¢ Le service renomme automatiquement les nouveaux fichiers PNG, JPG et JPEG")
    print("   ‚Ä¢ Ajoutez des fichiers PNG dans le dossier surveill√©")
    print("   ‚Ä¢ Tapez 'menu' pour afficher les options")
    print("   ‚Ä¢ Appuyez sur Ctrl+C ou tapez 'quit' pour arr√™ter le service")
    print()
    print("-" * 55)
    
    def print_interactive_menu():
        print("\n" + "=" * 50)
        print("üìã MENU DU SERVICE DE SURVEILLANCE")
        print("=" * 50)
        print("1. üìä Voir le statut du service")
        print("2. üìÅ Changer de dossier surveill√©")
        print("3. üè∑Ô∏è  Changer le pr√©fixe")
        print("4. üìã R√©organiser tous les fichiers")
        print("5. ‚ùå Arr√™ter le service")
        print("6. üîÑ Retourner √† la surveillance")
        print("=" * 50)
    
    def handle_interactive_menu():
        while True:
            print_interactive_menu()
            try:
                choice = input("\nVotre choix (1-6): ").strip()
                
                if choice == "1":
                    print(f"\nüìä STATUT DU SERVICE:")
                    print(f"   üìÅ Dossier surveill√©: {directory_path}")
                    print(f"   üè∑Ô∏è  Pr√©fixe actuel: {prefix}")
                    print(f"   üü¢ Service: Actif")
                    input("\nAppuyez sur Entr√©e pour continuer...")
                    
                elif choice == "2":
                    print("\n‚ùå Pour changer de dossier, vous devez red√©marrer le service.")
                    confirm = input("Voulez-vous arr√™ter le service maintenant ? (o/N): ").strip().lower()
                    if confirm in ['o', 'oui', 'y', 'yes']:
                        return "stop"
                    
                elif choice == "3":
                    try:
                        new_prefix = input(f"\nNouveau pr√©fixe (actuel: '{prefix}'): ").strip()
                        if new_prefix:
                            # Mettre √† jour le pr√©fixe
                            event_handler.prefix = new_prefix
                            save_prefix(directory_path, shortcut_name, new_prefix)
                            print(f"‚úÖ Pr√©fixe chang√© pour '{new_prefix}'")
                        input("\nAppuyez sur Entr√©e pour continuer...")
                    except KeyboardInterrupt:
                        print("\n‚ùå Changement annul√©.")
                        
                elif choice == "4":
                    print("\nüîÑ R√©organisation en cours...")
                    try:
                        event_handler.reorganize_all_files(Path(directory_path))
                        print("‚úÖ R√©organisation termin√©e!")
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la r√©organisation: {e}")
                    input("\nAppuyez sur Entr√©e pour continuer...")
                    
                elif choice == "5":
                    confirm = input("\n‚ùì √ätes-vous s√ªr de vouloir arr√™ter le service ? (o/N): ").strip().lower()
                    if confirm in ['o', 'oui', 'y', 'yes']:
                        return "stop"
                        
                elif choice == "6":
                    print("\nüîÑ Retour √† la surveillance...")
                    return "continue"
                    
                else:
                    print("‚ùå Choix invalide. Veuillez choisir entre 1 et 6.")
                    
            except KeyboardInterrupt:
                print("\nüîÑ Retour √† la surveillance...")
                return "continue"
    
    try:
        print("üí¨ Tapez 'menu' pour les options, 'quit' pour quitter, ou Ctrl+C pour arr√™ter")
        while True:
            try:
                # Attendre une entr√©e utilisateur avec timeout
                user_input = input("\n> ").strip().lower()
                
                if user_input in ['menu', 'm']:
                    result = handle_interactive_menu()
                    if result == "stop":
                        break
                    elif result == "continue":
                        print("üì° Surveillance reprise...")
                        continue
                        
                elif user_input in ['quit', 'q', 'exit', 'stop']:
                    confirm = input("‚ùì √ätes-vous s√ªr de vouloir arr√™ter le service ? (o/N): ").strip().lower()
                    if confirm in ['o', 'oui', 'y', 'yes']:
                        break
                    else:
                        print("üì° Surveillance continue...")
                        
                else:
                    print("üí° Commandes disponibles: 'menu' (options), 'quit' (arr√™ter)")
                    
            except EOFError:
                # Gestion des inputs vides ou Ctrl+D
                time.sleep(0.5)
                continue
                
    except KeyboardInterrupt:
        print("\n\nüî¥ Arr√™t du service demand√©...")
    
    observer.stop()
    print("‚úÖ Service arr√™t√© avec succ√®s.")
    
    observer.join()


if __name__ == "__main__":
    main()
